#+title: 为现代 Web 而生

* 内容
- SQL 和 MongoDB 的历史和发展
- 从 SQL 和其他 NoSQL 用户角度看待 MongoDB
- MongoDB 的常见使用场景及其重要性
- MongoDB 的配置和最佳实践

* SQL 和 NoSQL 的发展

SQL 诞生于 1974 年, ANSI SQL 诞生于 1986,最新的是 SQL:2016

NoSQL 诞生于 1998(Strozzi)

MongoDB 2009 年 v1,2011 v2,2015 v3,207 v3.4,2018 v4.0。

NoSQL 基于不严格的 ACID  特性, 使得他能够拥有比较好的性能、可扩展性、灵活性、低复杂度。

* MongoDB 的发展

** v1.0 和 v1.2

- 文档模型(document-based model)
- 全局锁(Global lock(process level))
- 集合索引
- 文档的 CRUD 操作
- 无认证(认证是在服务器层处理的)
- 主从复制
- MapReduce(v1.2)
- 存储 JavaScript 函数(v1.2)

** v2

- Background index creation (since v1.4)
- 分片 v1.6
- 更多的操作符 v1.6
- Journaling (since v1.8)
- 稀疏和覆盖索引 v1.8
- 压缩命令,减少磁盘使用
- 更叫高效的内存使用
- 并发提升
- 索引性能增强
- 副本集更具可配置性并且具有数据中心意识
- MapReduce 增强
- 认证 2.0
- 地理空间功能
- 聚合框架 v2.2 和 聚合增强 v2.6
- TTL collections v2.2
- DB 级别的锁并发性能提升 v2.2
- 全文搜索 v2.4 and integration (since v2.6)
- 哈希索引 2.4
- 安全性增强和基于角色的访问权限 v2.4
- V8 JavaScript 引擎替代 SpiderMonkey v2.4
- 查询引擎增强 v2.6
- 可插拔的存储引擎 API
- 引入 WiredTiger 存储引擎,支持文档级别的锁,而(MMAPv1 支持的是集合级别的锁)

** v3

- 复制和分片增强 v3.2
- 文档验证 v3.2
- 聚合框架增强操作 v3.2
- 多个存储引起(仅在企业版本中)
- Query language and indexes collation (since v3.4)
- 只读的数据库视图  v3.4
- Linearizable read concern (since v3.4)

** v4

- 多个文档的 ACID 事务
- Change streams
- MongoDB tools (Stitch, Mobile, Sync, and Kubernetes Operator)

** 整体的发展

v1 就是一些基础的功能,v2 提供绝大数功能,如: 分片、索引、地理空间特性,内存和并发提升

v2 到 v3  主要是聚合框架,全文搜索等。WiredTiger 的引入,使得锁不在是个大问题(之前是全局锁),锁可以在文档级别。

v4 是一个重大的升级,提供了多文档的 ACID 事务特定,使得 NoSQL 可以更像 SQL。这使得绝大部分应用可以使用 MongoDB,尤其是需要强实时一致性保证的应用。
change stream 使得实时应用更加快速。

* MongoDB 之于 SQL 开发开发者

web2.0 时代,大部分用户使用 SQL 和 ORM 工具来操作数据库。

从高层比较 SQL 和 MongoDB
- 数据库和索引(SQL 中的数据库)
- 集合(SQL 中的表)
- 文档(SQL 中的行记录)
- 字段(SQL 中的列)
- 内嵌和连接文档(SQL 中的 join)

| SQL                                               | MongoDB                                                               |
| Database                                          | Database                                                              |
| Table                                             | Collection                                                            |
| Index                                             | Index                                                                 |
| Row                                               | Document                                                              |
| Column                                            | Field                                                                 |
| Joins                                             | Embed in document or link via DBRef                                   |
| CREATE TABLE employee (name VARCHAR(100))         | db.createCollection("employee")                                       |
| INSERT INTO employees VALUES (Alex, 36)           | db.employees.insert({name: "Alex", age: 36})                          |
| SELECT * FROM employees                           | db.employees.find()                                                   |
| SELECT * FROM employees LIMIT 1                   | db.employees.findOne()                                                |
| SELECT DISTINCT name FROM employees               | db.employees.distinct("name")                                         |
| UPDATE employees SET age = 37 WHERE name = 'Alex' | db.employees.update({name: "Alex"}, {$set: {age: 37}}, {multi: true}) |
| DELETE FROM employees WHERE name = 'Alex'         | db.employees.remove({name: "Alex"})                                   |
| CREATE INDEX ON employees (name ASC)              | db.employees.ensureIndex({name: 1})                                   |
* MongoDB 之于 NoSQL 开发者

主要针对 Cassandra and HBase 用户

- 灵活性 ::
  mongodb 的文档嵌套特性使得它更具表现力和可扩展性。这个和 MongoDB 与 SQL 的比较类似。
- 灵活的查询模型 ::
  用户可以选择文档的的一部分;查询时基于属性值、正则表达式、范围,并且从应用层角度对象具有很多属性;主索引、辅助索引以及一些特殊类型的索引(例如稀疏索引),可以极大的提高查询效率,使用 JavaScript 交互环境来调用 MapReduce 使得开发者可以快速查阅数据并获取有价值的内容。
- 原生的聚合 ::
  聚合框架提供了 extract ,transform,load(ETL) 管道来给用户提供提取转化数据的功能,并且可以用新的格式加载数据或从 MongoDB 导出数据到其他数据源。这可以帮助数据分析师和科研人员获取数据的切片。
- 无模式数据模型 ::
  Cassandra and HBase 是基于模式的,MongoDB 没有数据模型

* MongoDB 的关键特性和使用场景

** 关键特性

- 一个通用的数据库 ::
  其他的 NoSQL 数据通常是为了特殊目的构建的(例如: 网格数据库)。MongoDB 可以适应各种各样的应用场景,尤其是 4.0 之后引入了 多文档的 ACID 特性。
- 灵活的模式设计 ::
  文档特定使得可以随意更改一个文档的属性
- 内置的高可用特性 ::
  在可用性要达到 5 个 9 的时代,这是必然要做到的。自带的服务器故障检测和故障转移使得 MongoDB 可以做到高可用
- 丰富的功能 ::
  提供了所有和 SQL 等价的操作,还有 MapReduce、聚合框架、生存时间、有存储上限的集合、辅助索引,这些使用 MongoDB 可以满足很多的场景
- 可扩展性和负载均衡 ::
  自带了水平(主要)和垂直扩展功能。使用分片,可以在多个实例之间共享负载和读写的的扩展能力。分片均衡器会自动实现数据的均衡(对用户是透明的)
- 聚合框架 ::
  内置的 ETL 框架使得开发者可以在数据库层面执行大多数的 ETL 逻辑。
- 原生的复制 ::
  无序负载的设置就能够在副本集中复制数据
- 安全特性 ::
  认证和授权可以保证 MongoDB 实例的安全性
- JSON(BSON 和 Binary JSON) 存储和传送 ::
  json 在 web 和接口之间传递非常流行, MongoDB 使得这些操作更加方便
- MapReduce ::
  尽管他没有专业工具强大,但是他依然是构建数据管道的强有力工具
- 查询 2d 和 3d 地理空间数据 ::
  大多数应用可能不需要这个功能, 但是仍然是非常方便的工具
- 多文档的 ACID 事务 ::
  从 4.0 开始, MongoDB 支持多文档的 ACID 事务
- 成熟的工具 ::
  The tooling for MongoDB has evolved to support from DBaaS to Sync, Mobile, and serverless (Stitch)

* MongoDB 使用场景

大部分成功的应用场景如下:
- 集成孤立的数据,提供他们的单一视图。
- 物联网(IoT)
- 移动应用
- 实时分析
- 个性化
- 目录管理
- 内容管理
所有这些场景都有如下的特点:
- 灵活的模式时最重要的一点
- 扩展能力和分片能力
- 数据归档。归档在 MongoDB 中可以在后续用于数据分析
- 在内存中存储数据来提升性能,MMAP 引擎将数据隐射交给操作系统,使得数据可以在内存中
- 有上限的集合。能够限制文档的数量或者集合的数据量大小。对于后一种我们需要估算每个文档的大小,来计算能够存储多少的文档。大多数时候,可以用来快速构建一个队列系统,这样就不需要单独部署 ActiveMQ 这类专门的消息队列工具,开发这可以使用原生的 tailable 游标来变量结果并且发送给外部系统
- 低操作开销。在敏捷团队中无需 DBA 就能够管理 MongoDB 的集群。MongoDB Management Service (MMS)可以极大的降低管理的开销。
- 地理位置应用得益于 mongodb 支持 2d 和 3d 的相关操作
- 整体上来说,还是得益于 MongoDB 的丰富功能集。

* MongoDB 被批评的点

- 无模式是一把双刃剑
- 缺乏 ACID 特性,使得多个文档的操作,如果后面的操作失败,需要手动回滚前面的操作,这是很难的
- 4.0 的多文档 ACID 牺牲了性能,但是大多数 CRUD 操作是不需要事务的,他解决了缺乏 ACID 特性的批判

* MongoDB 的配置和最佳实践
- 开启日志 ::
  日志使用的是 write-ahead 来帮助恢复服务器。如果使用的是 MMAPv1 存储引擎,那么一定要开启日志。对于 WiredTiger 存储引擎,日志和检查点是一起使用来保证数据持久性。任何场景下都应当使用日志并且微调日志的大小以及检查点的频率,来避免数据的丢失。在 MMAPv1 中默认日志每 100ms 同步到磁盘。如果 MongoDB 在确认写操作之前正在等待日志,那么日志每 30ms 同步到磁盘。
- 工作集应当适应内存大小 ::
  尤其是是 MMAPv1 时,工作集最好小于内存的的大小。MMAPv1 使用内存来映射文件,如果能够减少交换区(swap) 的使用,就可以大大提升性能。WiredTiger 在使用内存方面效率更高,但是同样应当小于内存大小。工作集的大小通过 =db.stats()=  命令查看的最大数据大小加上索引的大小。
- 注意数据文件的位置 ::
  数据文件可以通过 =--dbpath= 命令行选项设置,指定的存储位置应当具有足够的存储容量,最好选择 XFS(XFS一种高性能的日志文件系统) 或者 Ext4(linux 下的日志文件系统) 文件系统。
- 保持版本更新 ::
  偶数版本是稳定版,例如 3.2 3.4 4.0.2 4.2
- 使用 Mongo MMS 来监控服务器 ::
- 在负载较高时应当进行扩展 ::
  当 CPU 或者内存使用率到达 65%,或者磁盘交换区被使用时就应当开始扩展,可以水平也可以垂直扩展。
- 分片时要小心 ::
  分片极其依赖于分片键。如果你作出了错误的决定,从操作的角度来看,这是不可逆的。当考虑分片时,架构师,应当深入的考虑当前的工作负载(读/写),以及当前和预期的数据访问模式。
- 使用 MongoDB 团队提供的应用驱动 ::
  这些驱动更新即时。
- 定期备份 ::
  XFS 文件系统是非常好的选择,因为他可以执行快照备份。
- 应当避免人工备份 ::
  如果可以的话,应当使用定期自动的备份。如果需要手动备份,可以使用副本集的隐藏成员来进行备份。必须这个成员上使用了 =db.fsyncwithlock= 并开启日志,来获取最大的一致性。如果磁盘卷在 AWS 上,那么可以快速获取一个 EBS 快照
- 启动数据库权限控制 ::
  通过适当的防火墙在节点级别开启控制。使用内置的角色来实现 DB 级别的控制,这是需要通过参数 =--auth= 来开始的,然后在 admin 集合来实现相关角色配置
- 使用真实的数据来测试当前的部署

* 模式设计最佳实践

- 尽早并经常进行索引 ::
  通过 MMS、Compass GUI、日志等识别常用的查询模式,并在项目开始时尽早的进行索引。
- 删除不必要的索引 ::
  通过聚合管道以及 =$indexStats= 可以找到不常使用的索引,然后删除它
- 使用复合的索引而不是单个索引
  和 SQL 的复合索引类型,A、B、C 必须包含 A 字段查询才能使用索引
- 低选择性索引 ::
  也就是索引的相同值要少,比如男女这种不应该索引,因为匹配太多的数据
- 使用正则表达式 ::
  应当是开头匹配
- 避免反向查询 ::
  索引是索引的值, 如果在查询中使用了 not 可能会导致全表扫描
- 使用局部索引(partial index) ::
  如果你需要索引集合中的一部分文档,局部索引可以最小化索引大小,并且提升性能。局部所以会包含一个在查询中用到的条件。
- 使用文档校验 ::
  使用文档校验来监控文档中插入的新属性并且决定如何处理。如果设置为 warn ,可以通过日志来记录哪些携带了未知属性的文档,方便后续跟踪是否是 bug 或者是新的设计
- 使用MongoDB Compass: ::
  他是一个可视化工具,可以快速检阅数据以及增长过程
- 遵守最大文档 16MB 这个约定
- 使用合适的存储引擎 ::
  内存引擎应当用在实时要求高的场景,加密的引擎应当用在需要数据安全的场景

* 写持久化的最佳实践

写持久化在 MongoDB 中可以进行微调,具体取决于我们的应用

在 WiredTiger 引擎中,推荐的是 检查点之后 60 秒,或者写入了2GB 数据后。可以通过 =--wiredTigerCheckpointDelaySecs= 命令行参数来修改

在 MMAPv1 引擎中每 60 秒刷新到磁盘,可以通过 =--syncDelay= 命令行参数修改

还有其他一些:
- WiredTiger ,对于多次盘一致性快照可以使用 XFS 文件系统
- 可以在数据卷中关闭 =atime= 和 =diratime=
- 保证拥有足够的交换空间(swap space 一般是大于 2 倍内存)
- You can use a NOOP scheduler if you are running in virtualization environments
- 可以将文件描述符提升到数万个
- 可以禁用透明大页面(transparent huge pages),而是启用标准的 4-KVM 页面
- 写安全应当记录日志
- SSD 读应当默认是 16 磁盘跨,HDD 应当是 32 磁盘块
- 可以在 BIOS 中关闭 NUMA
- 可以使用 RAID 10
- 可以通过 NTP 同步主机的时间,尤其是在分片环境中
- 在生成环境中应当使用 64 位版,因为 32 位只支持 2GB 内存

* 复制的最佳实践

- 总是使用副本集 ::
  即使你认为数据集很小,并且不会增长很大。并且至少 3 个服务器,这样可以拆分实时工作和分析工做的负载,并且从一开始构建数据冗余。
- 使用副本集来增强系统 ::
  副本集不仅是复制,还可以实现主节点写,从节点读,来减轻主节点的压力。通过设置读选项来进行服务,通过写选项来保证写入会根据需要进行传播。
- 使用奇数个副本集 ::
  如果一台服务器宕机或与其余服务器失去连接（网络分区），则其余的服务器必须投票决定将哪一台服务器选为主服务器。如果副本集成员的数量为奇数，则可以保证服务器的每个子集都知道它们属于副本集成员的多数还是少数。如果我们不能有奇数数量的副本，则我们需要有一个额外的主机集作为仲裁者，其唯一目的是在选举过程中进行投票。即使是EC2中的微型实例也可以达到这个目的。

* 分片的最佳实践

分片是 MongoDB 中为水平扩展提供的解决方案

- 考虑查询路由 ::
  基于不同的分片键和技术,mongos 的查询路由可能发送请求到部分或者全部额分片成员。不应该出现查询发送给所有的分片成员中
- 使用 tag-aware 分片 :: 标签提供了更细粒度的数据区分,这样我们可以确保数据会存储在特定的分片集中。

* 安全性最佳实践

安全性始终需要在多个层级实现,下面提供的是基础的安全实践建议
- 禁用 HTTP 状态的界面
- 禁用 RESTful API
- 禁用 JSON API
- 使用 SSL 连接 MongoDB
- 审核系统活动
- 使用合适的系统用户的系统权限来访问 MongoDB
- 如果不需要的话,禁用服务器的脚本。他会影响 MapReduce,内置 db.group()  命令、$where 操作。可以通过 =--noscripting= 参数禁用
